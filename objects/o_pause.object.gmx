<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause game and timers
// Save application surface
spr = sprite_create_from_surface(application_surface, 0, 0, view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false, false, 0, 0);

// Test for proper sprite save
if (spr == -1) {
    show_message("Failed to create sprite from application surface!");
    game_end();
} else {
    //color = o_game.color;
    
    //with (oPaint)
    //    instance_destroy();
    
    // Deactivate all other objects
    instance_deactivate_all(true);
    instance_activate_object(o_game);
    //instance_activate_object(oLeaderboard);
}

audio_set_master_gain(0, 0.25);

// Leaderboard stuff
//PauseStartTime = get_timer();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw sprite surface (edit)
/*
surf = surface_create(sprite_width, sprite_height);

// Clear surface
surface_set_target(surf);
draw_clear_alpha(0, 0);
// Draw sprite
draw_sprite(sprite_index, -1, 0, 0);
surface_reset_target();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Paint, controlling the cursor position (edit)
cursorAng = random(360);
pausePos  = 183;

upPrev   = false;
downPrev = false;

/*
for (var i = 0; i &lt; 128; i++)
    instance_create(view_xview[0] + 320 + random_range(-64, 64), view_yview[0] + 138 + random_range(-16, 16), oPaint);
    
for (var i = 0; i &lt; 64; i++)
    instance_create(view_xview[0] + 320 + random_range(-32, 32), view_yview[0] + 183 + random_range(-8, 8), oPaint);

for (var i = 0; i &lt; 64; i++)
    instance_create(view_xview[0] + 320 + random_range(-32, 32), view_yview[0] + 223 + random_range(-8, 8), oPaint);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set game aesthetics back to normal

audio_set_master_gain(0, 1);
draw_set_alpha(1.0);
draw_set_colour(c_white);

/*
oLeaderboard.PauseOffsetTimeLevel += get_timer() - PauseStartTime;
oLeaderboard.PauseOffsetTimeWorld += get_timer() - PauseStartTime;
oLeaderboard.PauseOffsetTimeGame  += get_timer() - PauseStartTime;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control pause menu, including un-pausing

var pause = (keyboard_check_pressed(ord('P')) || gamepad_button_check_pressed(0, gp_start) || keyboard_check_pressed(vk_escape));
var kUp   = keyboard_check_pressed(vk_up)             || gamepad_axis_value(0, gp_axislv) &lt; -0.70  || gamepad_button_check_pressed(0, gp_padu) || keyboard_check_pressed(ord('W'));
var kDown = keyboard_check_pressed(vk_down)           || gamepad_axis_value(0, gp_axislv) &gt;  0.70  || gamepad_button_check_pressed(0, gp_padd) || keyboard_check_pressed(ord('S'));

var kAction = gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space);


if (!instance_exists(o_fxRoomGoTo) &amp;&amp; !kAction) {
    if (kUp &amp;&amp; !upPrev &amp;&amp; !kDown) {
        //audio_play_sound(sfxMove, 0, 0);
        
        if (pausePos == 183) {
            pausePos = 223;
            
            //for (var i = 0; i &lt; 64; i++)
            //    instance_create(view_xview[0] + 320 + random_range(-32, 32), view_yview[0] + 223 + random_range(-8, 8), oPaint);
        } else if (pausePos == 223) {
            pausePos = 183;
            
            //for (var i = 0; i &lt; 64; i++)
            //    instance_create(view_xview[0] + 320 + random_range(-32, 32), view_yview[0] + 183 + random_range(-8, 8), oPaint);        
        }
        
        //color += 10;
    } else if (kDown &amp;&amp; !downPrev &amp;&amp; !kUp) {
        audio_play_sound(sfxMove, 0, 0);
        
        if (pausePos == 183) {
            pausePos = 223;
            
            //for (var i = 0; i &lt; 64; i++)
            //    instance_create(view_xview[0] + 320 + random_range(-32, 32), view_yview[0] + 223 + random_range(-8, 8), oPaint);
        } else if (pausePos == 223) {
            pausePos = 183;
            
            //for (var i = 0; i &lt; 64; i++)
            //   instance_create(view_xview[0] + 320 + random_range(-32, 32), view_yview[0] + 183 + random_range(-8, 8), oPaint);        
        }
        
        //color += 10;
    }
    
    if (kUp)
        upPrev = true;
    else
        upPrev = false;
        
    if (kDown)
        downPrev = true;
    else
        downPrev = false;
    
    cursorAng += 12;
    
    //// DO THIS LAST...? ////
    // Unpause
    if (pause) {
        //with (oPaint)
        //   instance_destroy();
        
        // Free surface
        if (surface_exists(surf))
            surface_free(surf);
        
        // Free sprite
        if (spr != -1)
            sprite_delete(spr);
            
        // Reactivate objects
        instance_activate_all();
        
        //with (o_game)
        //    color = other.color;
        
        instance_destroy();
    }
}

if (kAction) {
    if (!instance_exists(oFxRoomGoTo)) {
        if (pausePos == 223) {
            audio_play_sound(sfxSelect, 0, 0);
            
            // Save game object
            //instance_activate_object(oGame);
            
            with (instance_create(0, 0, o_fxRoomGoTo)) {
                if (room = rmCredits)
                    target = rmSplash;
                else
                    target = rmLevelSelect;
            }
            
            // Move to correct level select position
            o_game.lvlcurr = room - o_game.rmOffset;
        } else {
            //audio_play_sound(sfxSelect, 0, 0);
            
            //with (oPaint)
             //   instance_destroy();
            
            // Free surface
            if (surface_exists(surf))
                surface_free(surf);
            
            // Free sprite
            if (spr != -1)
                sprite_delete(spr);
                
            // Reactivate objects
            instance_activate_all();
            
            //with (o_game)
            //    color = other.color;
            
            instance_destroy();        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If level is exited

if (surface_exists(surf))
    surface_free(surf);
    
audio_set_master_gain(0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw pause spite to screen (edit)
/*
if (spr != -1)
    draw_sprite(spr, -1, view_xview[0], view_yview[0]);
  
// Box  
draw_set_color(make_colour_rgb(20, 0, 48));
draw_set_alpha(0.9);
//draw_rectangle(view_xview[0], view_yview[0], 640, 360, false);

draw_sprite(sprite_index, 1, view_xview[0], view_yview[0]);

if (surface_exists(surf)) {
    draw_surface(surf, view_xview[0], view_yview[0]);
} else {
    surf = surface_create(sprite_width, sprite_height);
    
    surface_set_target(surf);
    draw_clear_alpha(0, 0);
    draw_sprite(sprite_index, -1, 0, 0);    
    surface_reset_target();
    
    draw_surface(surf, view_xview[0], view_yview[0]);
}

draw_set_alpha(1.0);
draw_sprite_ext(sCursor, 0, view_xview[0] + 256 + 20, view_yview[0] + pausePos, 1, 1, cursorAng, c_white, 1);
draw_sprite_ext(sCursor, 0, view_xview[0] + 384 - 20, view_yview[0] + pausePos, 1, 1, -cursorAng, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
