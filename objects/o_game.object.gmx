<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Intialize game variables
if (instance_number(o_game) &gt; 1)
    instance_destroy();
    
// Player slots
slots[0] = noone;
slots[1] = noone;
slots[2] = noone;
slots[3] = noone;    

// Rooms
rm     = 0;
rmPrev = rm;

// Three rooms before levels (splash, title, and level select)
rmOffset = 3;

// global.IsCoinCollected = false;

// Camera /////////////////////////////////////////////////////////////////////

// Camera state
shake     = false;
babyshake = false;
xshake    = choose(-1, 1);
yshake    = choose(-1, 1);

// Camera offset
xcamo = 0;
ycamo = 0;

slowmo = false;

p = 0;
image_speed = 0.2;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load File

/*

ini_open("DontModifyThis.ini");

// This means new game
if (!ini_section_exists("NormalLevels")) {
    // Lock all levels
    for (var i = 0; i &lt; NUM_LEVELS; i++) {
        level[i] = false;
        ini_write_real("NormalLevels", string(i), 0);
    }
    
    // Keep first level open
    level[0] = true;
    //ini_write_real("NormalLevels", string(0), 1);
    maxLevel = 0;
    lvlcurr  = 0;
// Continue saved game
} else {
    maxLevel = 0;
    lvlcurr  = 0;
    
    var numCoinsCollected = 0;
    var flag = false;
    
    // Unlock levels that have been cleared
    for (var i = 0; i &lt; NUM_LEVELS - 1; i++) {
        level[i] = ini_read_real("NormalLevels", string(i), false); 
        
        if (level[i] == 2)
            numCoinsCollected++;
        
        // Hope this works
        if (i == 74) {
            level[74] = 0;
            ini_write_real("NormalLevels", string(74), 0);
        }
        
        if (!flag &amp;&amp; !level[i]) {
            lvlcurr = max(0, i);
            
            flag = true;
        }
    }
    
    maxLevel = lvlcurr;
}

ini_close();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shader
/*

display_set_gui_size(room_width, room_height);
vRatio = 1.0;

global.isShaderEnabled = true;

//EXTRAS:
dir = 1;

oscillatorValue = 0.3;
oscillatorValueAbs = 0.3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slowmo

slowmo = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screenshake

shake     = false;
babyshake = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera


// Make sure camera is inside room
view_xview[0] = max(0, min(view_xview[0], room_width  - view_wport[0]));
view_yview[0] = max(0, min(view_yview[0], room_height - view_hport[0]));      

// Adjust for screenshake
view_xview[0] += xcamo;
view_yview[0] += ycamo;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screenshake

var r;

r = 0;

// Screenshake
if (shake) {
    r = choose(-1, 1);
    
    if (r) {
        xcamo = xshake * SHAKE_DISTANCE;
        ycamo = 0;
        xshake *= -1;
    } else {
        xcamo = 0;
        ycamo = yshake * SHAKE_DISTANCE;    
        yshake *= -1;
    }
// Small screenshake
} else if (babyshake) {
    r = choose(-1, 1);
    
    if (r) {
        xcamo = xshake * SHAKE_DISTANCE * 0.5;
        ycamo = 0;
        xshake *= -1;
    } else {
        xcamo = 0;
        ycamo = yshake * SHAKE_DISTANCE * 0.5;    
        yshake *= -1;
    }
} else {
    xcamo = 0;
    ycamo = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// shader
/*

oscilatorValue = random_range(0.3, 0.35);

oscillatorValueAbs = abs(oscillatorValue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset framerate

if (slowmo) {
    if (room_speed != 10)
        room_speed = 10;
} else
    if (room_speed != 30)
        room_speed = 30;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit Confirmation Menu

//***
//Not bad, to have a constant exit option enabled.
/*
if (room == rmTitle)
{
    if (keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_start) || gamepad_button_check_pressed(0, gp_face2))
    {
        if (!instance_exists(oConfirmationMenu))
            instance_create(view_xview[0], view_yview[0], oConfirmationMenu)
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause Test

/*
if (room == rmTitle &amp;&amp; instance_exists(oInk) &amp;&amp; oInk.init3 &amp;&amp; !instance_exists(oConfirmationMenu))
{
    // Start Game
    if (gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space))
    {
        // audio_play_sound(sfxSelect, 0, 0);
        
        if (!instance_exists(o_fxRoomGoTo))
            instance_create(0, 0, o_fxRoomGoTo);
    }
    
    // Open Credits
    if (keyboard_check_pressed(ord('C')) || gamepad_button_check_pressed(0, gp_face4))
    {
        // audio_play_sound(sfxSelect, 0, 0);
        
        if (!instance_exists(o_fxRoomGoTo))
            with (instance_create(0, 0, o_fxRoomGoTo))
                target = rmCredits;
    }
}


// Open Pause Menu
if (room != rmSplash &amp;&amp; room != rmTitle &amp;&amp; room != rmLevelSelect)
{
    if (keyboard_check_pressed(ord('P')) || gamepad_button_check_pressed(0, gp_start) || keyboard_check_pressed(vk_escape))
        if (!instance_exists(o_pause))
            instance_create(view_xview[0], view_yview[0], o_pause);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug

if (debug_mode)
{
    /*
    if (keyboard_check_pressed(ord('W'))) {
        room_goto(rmCredits);
        //audio_play_sound(sfxDeckard, 0, 0);
    }
    */
    
    // Input variables for debug room traversal
    var kRestart, kExit, kPrev, kNext;
    
    kRestart = keyboard_check_pressed(ord('R'))    || gamepad_button_check_pressed(0, gp_select);
    kExit    = keyboard_check_pressed(vk_escape);
    kPrev    = keyboard_check_pressed(vk_subtract) || gamepad_button_check_pressed(0, gp_shoulderlb);
    kNext    = keyboard_check_pressed(vk_add)      || gamepad_button_check_pressed(0, gp_shoulderrb);
    
    if (kRestart)
        room_restart();
    if (kExit &amp;&amp; room != rmTitle)
        game_end();
      
    // Iterate through rooms backward
    if (kPrev) {
        if (room == room_first)
            room_goto(room_last);
        else
            room_goto_previous();
    }
    
    // Iterate through rooms forwards
    if (kNext) {
        if (room == room_last)
            room_goto(room_first);
        else
            room_goto_next();
    }
    
    // Fullscreen test
    if (keyboard_check_pressed(ord('F'))) {
        // Save surface(s) to buffer(s)
        
        /*
        with (oZackBellGames) {
            // Create buffer of surface size
            if (buf == -1)     
                buf = buffer_create(surface_get_width(surf) * surface_get_height(surf) * 4, buffer_fixed, 4);
            
            // Save surface to buffer
            buffer_get_surface(buf, surf, 0, 0, 0);
            
            surface_free(surf);
            surf = -1;
        }
        */
    
        // Surface is destroyed here
        window_set_fullscreen(!window_get_fullscreen());
       // room_restart();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character Select Room: Create player slots

if room == room_start {
    if instance_exists(o_menuCharacterSelect) {
        var i;
        for ( i = 0; i &lt; array_length_1d(slots); i += 1 ) {
            if o_menuCharacterSelect.characterSelectors[i] != noone {
                var oldMatchWins = 0;
                if slots[i] != noone {
                    oldMatchWins = slots[i].matchWins;
                }
                slots[i] = instance_create(0,0,o_slot);
                slots[i].inputIndex = o_menuCharacterSelect.characterSelectors[i].inputIndex;
                slots[i].inputType = o_menuCharacterSelect.characterSelectors[i].input.type;
                slots[i].dogIndex = o_menuCharacterSelect.characterSelectors[i].dogIndex;
                slots[i].matchWins = oldMatchWins;
                show_debug_message("slots[" + string(i) + "].inputType is " + string(slots[i].inputType));
                show_debug_message("slots[" + string(i) + "].dogIndex is " + string(slots[i].dogIndex));
            } else {
                slots[i] = noone;
            }
            
        }
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room Audio Setup

//rmPrev = rm;
//rm     = room;

xcamo = 0;
ycamo = 0;

//color = round(random_range(0, 255));
/*
// Stop superfluous audio
if (audio_is_playing(tTitle))
    if (!audio_sound_get_gain(tTitle))
        audio_stop_sound(tTitle);
if (audio_is_playing(tTutorial))
    if (!audio_sound_get_gain(tTutorial))
        audio_stop_sound(tTutorial);
if (audio_is_playing(tWorld1))
    if (!audio_sound_get_gain(tWorld1))
        audio_stop_sound(tWorld1);
if (audio_is_playing(tBoss1))
    if (!audio_sound_get_gain(tBoss1))
        audio_stop_sound(tBoss1);
if (audio_is_playing(tWorld2))
    if (!audio_sound_get_gain(tWorld2))
        audio_stop_sound(tWorld2);
if (audio_is_playing(tBoss2))
    if (!audio_sound_get_gain(tBoss2))
        audio_stop_sound(tBoss2);
if (audio_is_playing(tWorld3))
    if (!audio_sound_get_gain(tWorld3))
        audio_stop_sound(tWorld3);
if (audio_is_playing(tBoss3))
    if (!audio_sound_get_gain(tBoss3))
        audio_stop_sound(tBoss3);
if (audio_is_playing(tCredits))
    if (!audio_sound_get_gain(tCredits))
        audio_stop_sound(tCredits);

// Music
switch (room) {
    // TITLE/Splash/LevelSelect
    case rmTitle:
    case rmLevelSelect:
    case rmSplash:
        if (!audio_is_playing(tTitle) || !audio_sound_get_gain(tTitle)) {
            if (audio_is_playing(tTutorial)) {
                audio_sound_gain(tTutorial, 1, 0);  
                audio_sound_gain(tTutorial, 0, 500);             
            }
            
            if (audio_is_playing(tWorld1)) {
                audio_sound_gain(tWorld1, 1, 0);  
                audio_sound_gain(tWorld1, 0, 500);             
            }
            
            if (audio_is_playing(tBoss1)) {
                audio_sound_gain(tBoss1, 1, 0);  
                audio_sound_gain(tBoss1, 0, 500);             
            }
            
            if (audio_is_playing(tWorld2)) {
                audio_sound_gain(tWorld2, 1, 0);  
                audio_sound_gain(tWorld2, 0, 500);             
            }
            
            if (audio_is_playing(tBoss2)) {
                audio_sound_gain(tBoss2, 1, 0);  
                audio_sound_gain(tBoss2, 0, 500);             
            }
            
            if (audio_is_playing(tWorld3)) {
                audio_sound_gain(tWorld3, 1, 0);  
                audio_sound_gain(tWorld3, 0, 500);             
            }
            
            if (audio_is_playing(tBoss3)) {
                audio_sound_gain(tBoss3, 1, 0);  
                audio_sound_gain(tBoss3, 0, 500);             
            }
            
            if (audio_is_playing(tCredits)) {
                audio_sound_gain(tCredits, 1, 0);  
                audio_sound_gain(tCredits, 0, 500);             
            }
                        
            audio_sound_gain(tTitle, 0, 0);  
            audio_play_sound(tTitle, 0, true);
            audio_sound_gain(tTitle, 1, 1000);      
        }    
    break;
    
    // WORLD 1
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
        if (!audio_is_playing(tTutorial) || !audio_sound_get_gain(tTutorial)) {
            if (audio_is_playing(tTitle)) {
                audio_sound_gain(tTitle, 1, 0);  
                audio_sound_gain(tTitle, 0, 500);             
            }
            
            audio_sound_gain(tTutorial, 0, 0);  
            audio_play_sound(tTutorial, 0, true);
            audio_sound_gain(tTutorial, 1, 1000);      
        }  
    break;
    
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
        if (!audio_is_playing(tWorld1) || !audio_sound_get_gain(tWorld1)) {
            if (audio_is_playing(tTitle)) {
                audio_sound_gain(tTitle, 1, 0);  
                audio_sound_gain(tTitle, 0, 500);             
            }
            
            if (audio_is_playing(tTutorial)) {
                audio_sound_gain(tTutorial, 1, 0);  
                audio_sound_gain(tTutorial, 0, 500);             
            }
            
            audio_sound_gain(tWorld1, 0, 0);  
            audio_play_sound(tWorld1, 0, true);
            audio_sound_gain(tWorld1, 1, 1000);      
        }  
    break;
    
    // BOSS 1
    case 27:
        if (!audio_is_playing(tBoss1) || !audio_sound_get_gain(tBoss1)) {            
            if (audio_is_playing(tTitle)) {
                audio_sound_gain(tTitle, 1, 0);  
                audio_sound_gain(tTitle, 0, 500);             
            }
            
            if (audio_is_playing(tWorld1)) {
                audio_sound_gain(tWorld1, 1, 0);  
                audio_sound_gain(tWorld1, 0, 500);             
            }
            
            audio_sound_gain(tBoss1, 0, 0);  
            audio_play_sound(tBoss1, 1, true);
            audio_sound_gain(tBoss1, 1, 1000);      
        }  
    break;
    
    // WORLD 2
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
        if (!audio_is_playing(tWorld2) || !audio_sound_get_gain(tWorld2)) {
            if (audio_is_playing(tTitle)) {
                audio_sound_gain(tTitle, 1, 0);  
                audio_sound_gain(tTitle, 0, 500);             
            }

            if (audio_is_playing(tBoss1)) {
                audio_sound_gain(tBoss1, 1, 0);  
                audio_sound_gain(tBoss1, 0, 500);             
            }
            
            audio_sound_gain(tWorld2, 0, 0);  
            audio_play_sound(tWorld2, 0, true);
            audio_sound_gain(tWorld2, 1, 1000);      
        }      
    break;
    
    // BOSS 2
    case 52:
        if (!audio_is_playing(tBoss2) || !audio_sound_get_gain(tBoss2)) {
            if (audio_is_playing(tTitle)) {
                audio_sound_gain(tTitle, 1, 0);  
                audio_sound_gain(tTitle, 0, 500);             
            }
            
            if (audio_is_playing(tWorld2)) {
                audio_sound_gain(tWorld2, 1, 0);  
                audio_sound_gain(tWorld2, 0, 500);             
            }
            
            audio_sound_gain(tBoss2, 0, 0);  
            audio_play_sound(tBoss2, 0, true);
            audio_sound_gain(tBoss2, 1, 1000);      
        }  
    break;
    
    // WORLD 3
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
        if (!audio_is_playing(tWorld3) || !audio_sound_get_gain(tWorld3)) {
            if (audio_is_playing(tTitle)) {
                audio_sound_gain(tTitle, 1, 0);  
                audio_sound_gain(tTitle, 0, 500);             
            }

            if (audio_is_playing(tBoss2)) {
                audio_sound_gain(tBoss2, 1, 0);  
                audio_sound_gain(tBoss2, 0, 500);             
            }
            
            audio_sound_gain(tWorld3, 0, 0);  
            audio_play_sound(tWorld3, 0, true);
            audio_sound_gain(tWorld3, 1, 1000);      
        }  
    break;
    
    // BOSS 3
    case 77:
        if (!audio_is_playing(tBoss3) || !audio_sound_get_gain(tBoss3)) {
            if (audio_is_playing(tTitle)) {
                audio_sound_gain(tTitle, 1, 0);  
                audio_sound_gain(tTitle, 0, 500);             
            }
            
            if (audio_is_playing(tWorld3)) {
                audio_sound_gain(tWorld3, 1, 0);  
                audio_sound_gain(tWorld3, 0, 500);             
            }
            
            audio_sound_gain(tBoss3, 0, 0);  
            audio_play_sound(tBoss3, 0, true);
            audio_sound_gain(tBoss3, 1, 1000);      
        }  
    break;
    
    case 78:
        if (!audio_is_playing(tCredits) || !audio_sound_get_gain(tCredits)) {
            if (audio_is_playing(tTitle)) {
                audio_sound_gain(tTitle, 1, 0);  
                audio_sound_gain(tTitle, 0, 500);             
            }
            
            if (audio_is_playing(tBoss3)) {
                audio_sound_gain(tBoss3, 1, 0);  
                audio_sound_gain(tBoss3, 0, 500);             
            }
            
            audio_sound_gain(tCredits, 0, 0);  
            audio_play_sound(tCredits, 0, true);
            audio_sound_gain(tCredits, 1, 1000);      
        }     
    break;
    
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Saving progress
/*
ini_open("DontModifyThis.ini");

maxLevel = 0;
lvlcurr  = 0;

var flag = false;

// Unlock levels that have been cleared
for (var i = 0; i &lt; NUM_LEVELS; i++) {
    level[i] = ini_read_real("NormalLevels", string(i), false); 
    
    if (!flag &amp;&amp; !level[i]) {
        lvlcurr = max(0, i);
        
        flag = true;
    }
}

maxLevel = lvlcurr;
ini_close();

// Old multiplayer stuff...

if (room == rmColorSelect) {
    // Which controller each player is using
    slots[0] = -1;
    slots[1] = -1;
    slots[2] = -1;
    slots[3] = -1;
    
    // Which color each player is using
    hue[0]  = 0;
    hue[1]  = 0;
    hue[2]  = 0;
    hue[3]  = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Room: Set up round

if room != room_start &amp;&amp; room != room_results {
    
    scr_createPlayers();
    instance_create(0, 0, o_roundStart);
    

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Results Room: create results object

if room == room_results {
    with instance_create(0, 0, o_results) {
        var highestScore = 0;
        var winnerIndex = 0
        var i;
        for (i = 0; i &lt; array_length_1d(o_game.slots); i += 1) {
            if o_game.slots[i] != noone {
                if o_game.slots[i].roundWins &gt; highestScore {
                    highestScore = o_game.slots[i].roundWins;
                    winnerIndex = i;
                }
            }
        } 
        slotIndex = winnerIndex;
        dogIndex = o_game.slots[slotIndex].dogIndex;
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug_mode) {
    show_debug_message("o_game Draw GUI Debug mode, drawing white");
    draw_set_color(c_white);
    draw_text(16, 16, string(maxLevel + 1));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
