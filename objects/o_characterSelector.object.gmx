<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize character selector

show_debug_message("Character Selector created!");
alarm[0] = room_speed / 6;

slot = -1;
input = noone;
inputIndex = -1; // used to access the right index in o_menuCharacterSelect.inputs
dogIndex = 0
confirmed = false;

matchWins = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Anull inputs and slots

show_debug_message("dropping " + string(input.name) + " from slot " + string(slot));
if instance_exists(o_menuCharacterSelect) {
    o_menuCharacterSelect.inputs[inputIndex].assigned = false;
    o_menuCharacterSelect.characterSelectors[slot] = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm to keep menu input at sane pace
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control character selector input

var keyPressed = "";

if input != noone {

    if input.leftPressed &amp;&amp; !confirmed {
        dogIndex -= 1;
    }
    if input.rightPressed &amp;&amp; !confirmed {
        dogIndex += 1;
    }
    
    if input.upPressed {
       confirmed = true;
    }
    
    if input.downPressed {
       if confirmed {
        confirmed = false;
       } else {
        instance_destroy();
       }
    }
    
}

if dogIndex &lt; 0 {
    dogIndex = NUM_CHARACTERS - 1;
}
if dogIndex &gt; NUM_CHARACTERS - 1 {
    dogIndex = 0;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy if gamepad removed

// ***
// This isn't fucking working, and maybe it's time to give up
// until someting else gives. Maybe people just shouldn't unplug
// thir controllers??

if input.type == INPUT_GAMEPAD {
    
    if gamepad_is_connected(input.port) {

    } else {
        show_debug_message("DESTROY");
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug: input messages


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the character selector

switch slot {
    case 0:
        draw_set_colour(c_red);
        break;
    case 1:
        draw_set_colour(c_blue);
        break;
    case 2:
        draw_set_colour(c_yellow);
        break;
    case 3:
        draw_set_colour(c_green);
        break;
    default:
        break;
}


// Selectors will take up a quarter of the screen
// and be positioned based on their slot
var xx = display_get_gui_width()*.12 + (slot * display_get_gui_width()/4 );
var yy = display_get_gui_height()*.5;

// Draw name
draw_set_halign(fa_center);
draw_text(xx, yy-64, scr_nameForIndex(dogIndex));

// Draw sprite
draw_sprite(scr_spriteForIndex(dogIndex), image_index, xx, yy);

// Draw info
var info =""
switch input.type {
    case INPUT_WASD:
        info = 
        "A and D to choose
W to confirm
S to drop out";
        break;
    default:
        info = 
        "LEFT and RIGHT to choose
UP to confirm
DOWN to drop out";
        break;
}
draw_text(xx, yy+64, info);

// Draw CONFIRM

if confirmed {
    draw_text(xx, yy-128, "READY!");
}

if matchWins &gt; 0 {
    draw_text(xx, yy+128, "WINS: " + string(matchWins));
}


draw_set_colour(c_white);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
