<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

player = noone;
name = "";

face = RIGHT;
movement = IDLE;

can_catch = true;
ball_held = false;

holder = instance_create(0,0,o_ball_holder);
holder.owner = self;
sensor = instance_create(0,0,o_sensor);
sensor.owner = self;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset dog's ability to catch ball

show_debug_message("can_catch reset!");

can_catch = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// platform physics


// Check for ground
if place_meeting(x, y+1, o_solid) {
    vspd = 0
    
    // Jumping
    if player.input.key_jump {
        vspd = -jspd;
    }
} else {
    // Gravity
    vspd += grav;
    
    if (player.input.key_jump_released &amp;&amp; vspd &lt; -jspd/3 ) {
        vspd = -jspd/3;
    }
}

// Moving right

if player.input.key_right {
    if hspd &lt; spd {
        hspd += acc;
    } else {
        hspd = spd;
    }
    
    face = RIGHT
}

// Moving left

if player.input.key_left {
    if hspd &gt; -spd {
        hspd -= acc;
    } else {
        hspd = -spd;
    }
    
    face = LEFT
}

// Check for stillness

if (!player.input.key_right &amp;&amp; !player.input.key_left) || (player.input.key_right &amp;&amp; player.input.key_left) {
    if hspd != 0 {
        if hspd &lt; 0 {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
}

// Horizontal collisions

if place_meeting(x+hspd , y, o_solid) {
    while(!place_meeting(x+sign(hspd), y, o_solid)) {
        x += sign(hspd);
    }
    hspd = 0;
}

// Move horizontally

x += hspd;

// Vertical collisions

if place_meeting(x, y+vspd, o_solid) {
    while(!place_meeting(x, y+sign(vspd), o_solid)) {
        y += sign(vspd);
    }
    vspd = 0;
}

// Move vertically

y += vspd;

// Set Sprite

sprite_index = sprite[face, movement];

// Set Sensor
if face = RIGHT {
    sensor.x = x+sensor_offset_x;
    sensor.y = y-sensor_offset_y;;
} else {
    sensor.x = x-sensor_offset_x;
    sensor.y = y-sensor_offset_y;;
}


// Set Holder

if face = RIGHT {
    holder.x = x+holder_offset_x;
    holder.y = y-holder_offset_y;
} else {
    holder.x = x-holder_offset_x;
    holder.y = y-holder_offset_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Face ball when match starts

if instance_exists(o_ball) {
    if o_ball.x &lt; x {
        show_debug_message("FACE LEFT");
        face = LEFT;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
