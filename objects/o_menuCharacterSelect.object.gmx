<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize menu and all available inputs

characterSelectors[0] = noone;
characterSelectors[1] = noone;
characterSelectors[2] = noone;
characterSelectors[3] = noone;

inputs[0] = noone;
inputs[1] = noone;
inputs[2] = noone;
inputs[3] = noone;
inputs[4] = noone;
inputs[5] = noone;

inputArrows = instance_create(0,0,o_input);
inputArrows.type = INPUT_ARROWS
inputArrows.inputIndex = 0;
inputs[0] = inputArrows;

inputWASD = instance_create(0,0,o_input);
inputWASD.type = INPUT_WASD
inputWASD.inputIndex = 1;
inputs[1] = inputWASD;

if gamepad_is_connected(0) {
    inputGamepad0 = instance_create(0,0,o_input);
    inputGamepad0.type = INPUT_GAMEPAD
    inputGamepad0.lastxaxis = gamepad_axis_value(0, gp_axislh)
    inputGamepad0.lastyaxis = gamepad_axis_value(0, gp_axislv)
    inputGamepad0.port = 0;
    inputGamepad0.inputIndex = 2;
    inputs[2] = inputGamepad0;
}

if gamepad_is_connected(1) {
    inputGamepad1 = instance_create(0,0,o_input);
    inputGamepad1.type = INPUT_GAMEPAD
    inputGamepad1.lastxaxis = gamepad_axis_value(1, gp_axislh)
    inputGamepad1.lastyaxis = gamepad_axis_value(1, gp_axislv)
    inputGamepad1.port = 1;
    inputGamepad1.inputIndex = 3;
    inputs[3] = inputGamepad1;
}

if gamepad_is_connected(2) {
    inputGamepad2 = instance_create(0,0,o_input);
    inputGamepad2.type = INPUT_GAMEPAD
    inputGamepad2.lastxaxis = gamepad_axis_value(2, gp_axislh)
    inputGamepad2.lastyaxis = gamepad_axis_value(2, gp_axislv)
    inputGamepad2.port = 2;
    inputGamepad2.inputIndex = 4;
    inputs[4] = inputGamepad2;
}

if gamepad_is_connected(3) {
    inputGamepad3 = instance_create(0,0,o_input);
    inputGamepad3.type = INPUT_GAMEPAD
    inputGamepad3.lastxaxis = gamepad_axis_value(3, gp_axislh)
    inputGamepad3.lastyaxis = gamepad_axis_value(3, gp_axislv)
    inputGamepad3.port = 3;
    inputGamepad3.inputIndex = 5;
    inputs[5] = inputGamepad3;
}


// Handle title
alphaStep = -0.02;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Preserve old character selections

var i;
for ( i = 0; i &lt; array_length_1d(o_game.slots); i += 1 ) {
    if o_game.slots[i] != noone {
        characterSelectors[i] = instance_create(0,0,o_characterSelector);
        characterSelectors[i].slot = i;
        characterSelectors[i].input = inputs[o_game.slots[i].inputIndex];
        characterSelectors[i].input.slot = i;
        inputs[o_game.slots[i].inputIndex].assigned = true;
        characterSelectors[i].inputIndex = o_game.slots[i].inputIndex;
        characterSelectors[i].characterIndex = o_game.slots[i].characterIndex;
        characterSelectors[i].matchWins = o_game.slots[i].matchWins;
    } else {
        characterSelectors[i] = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reverse image alpha fade
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm to keep menu input at sane pace
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for gamepad connections &amp; disconnections


if gamepad_is_connected(0) {
    if inputs[2] == noone {
        inputGamepad0 = instance_create(0,0,o_input);
        inputGamepad0.type = INPUT_GAMEPAD
        inputGamepad0.lastxaxis = gamepad_axis_value(0, gp_axislh)
        inputGamepad0.lastyaxis = gamepad_axis_value(0, gp_axislv)
        inputGamepad0.port = 0;
        inputs[2] = inputGamepad0;
    }
} else { inputs[2] = noone; }

if gamepad_is_connected(1) {
    if inputs[3] == noone {
        inputGamepad1 = instance_create(0,0,o_input);
        inputGamepad1.type = INPUT_GAMEPAD
        inputGamepad1.lastxaxis = gamepad_axis_value(1, gp_axislh)
        inputGamepad1.lastyaxis = gamepad_axis_value(1, gp_axislv)
        inputGamepad1.port = 1;
        inputs[3] = inputGamepad1;
    }
} else { inputs[3] = noone }

if gamepad_is_connected(2) {
    if inputs[4] = noone {
        inputGamepad2 = instance_create(0,0,o_input);
        inputGamepad2.type = INPUT_GAMEPAD
        inputGamepad2.lastxaxis = gamepad_axis_value(2, gp_axislh)
        inputGamepad2.lastyaxis = gamepad_axis_value(2, gp_axislv)
        inputGamepad2.port = 2;
        inputs[4] = inputGamepad2;
    }
} else { inputs[4] = noone }

if gamepad_is_connected(3) {
    if inputs[5] == noone {
        inputGamepad3 = instance_create(0,0,o_input);
        inputGamepad3.type = INPUT_GAMEPAD
        inputGamepad3.lastxaxis = gamepad_axis_value(3, gp_axislh)
        inputGamepad3.lastyaxis = gamepad_axis_value(3, gp_axislv)
        inputGamepad3.port = 3;
        inputs[5] = inputGamepad3;
    }
} else { inputs[5] = noone }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control character selector appearance and round begin


var activeSelectors = 0;
var confirmations = 0;

// Tally confirmations
var i;
for (i = 0; i &lt; array_length_1d(characterSelectors); i += 1) {
     if characterSelectors[i] != noone {
         activeSelectors += 1;
         //show_debug_message("activeSelectors is " + string(activeSelectors));
         if instance_exists(characterSelectors[i]) {
            if characterSelectors[i].confirmed = true {
                //show_debug_message("confirmations is " + string(confirmations));
                confirmations += 1;
            }
         } 
     }
}


// Create confirm indicator
if confirmations == activeSelectors &amp;&amp; activeSelectors &gt; 0 {
    if !instance_exists(o_confirmIndicator) {
        instance_create(0,0,o_confirmIndicator);
    }
} else {
    if instance_exists(o_confirmIndicator) {
        with o_confirmIndicator {
            instance_destroy();
        }
    }
}

// Add Character Selectors
var ii;
for (ii = 0; ii &lt; array_length_1d(inputs); ii += 1) { // for every input
    // if any button is pressed
    if inputs[ii] != noone {
        if (inputs[ii].upPressed || inputs[ii].downPressed || inputs[ii].leftPressed || inputs[ii].rightPressed ) {
            // check to see if the corresponding input can be assigned to a slot
            var iii;
           for (iii = 0; iii &lt; array_length_1d(characterSelectors); iii += 1) {
                if characterSelectors[iii] == noone &amp;&amp; inputs[ii].assigned == false {
                
                    show_debug_message("assigning " + string(inputs[ii].name) + " to slot " + string(ii));
                    // Create Character Selector
                    characterSelectors[iii] = instance_create(0,0,o_characterSelector);
                    characterSelectors[iii].slot = iii;
                    characterSelectors[iii].input = inputs[ii];
                    characterSelectors[iii].input.slot = iii;
                    inputs[ii].assigned = true;
                    characterSelectors[iii].inputIndex = ii;
                    break;
                }
                if characterSelectors[iii] == noone {
                    show_debug_message("Slot " + string(iii) + " is empty");
                } else {
                    show_debug_message("Slot " + string(iii) + " has input " + string(characterSelectors[iii].input.name) + " Port: " + string(characterSelectors[iii].input.port) + " InputIndex: " + string(ii));
                }
            }
        }
    }  
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle title image alpha

image_alpha += alphaStep

if image_alpha &lt;= 0.10 {
    alphaStep = 0.02;
}

if image_alpha &gt;= 1 {
    alphaStep = -0.02;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw title instructions
draw_set_halign(fa_center);
draw_text_colour(room_width / 2, 64, "TOUCH WASD / ARROW KEYS / D-PAD TO START", c_white, c_white, c_white, c_white, image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
